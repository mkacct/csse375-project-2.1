@startuml
interface ConfigRW {
}

class Configuration {
}

interface FilesLoader {
}

interface Check {
}

class CheckUtil {
}

class Message {
}

class MessageLevel {
}

class ClassDataCollection {
}

package "cli" {
  class App {
    -{static} MESSAGE_LEVEL_COLORS: Map<MessageLevel, TerminalTextColor>
    -filesLoader: FilesLoader
    -configLoader: ConfigRW
    -outStream: PrintStream
    -errStream: PrintStream
    ~run(check: Check[]): boolean
    -printCheckResults(checkName: String, generatedMsgs: Set<Message>): void
    -{static} colorMessageTag(msg: Message): String
    -printTotals(msgTotals: Map<MessageLevel, Integer>): void
    -{static} generateTotalsTerm(totalsTerms: List<String>, level: MessageLevel, count: int): void
  }

  enum TerminalTextColor {
    BLACK
    RED
    GREEN
    YELLOW
    BLUE
    PURPLE
    CYAN
    WHITE
    -{static} RESET: String
   -ansiCode: String
    +applyTo(text: String): String
  }

  App -> ConfigRW
  App -> Configuration
  App -> FilesLoader
  App ->"*" Check
  App -> CheckUtil
  App ->"*" Message
  App ->"*" MessageLevel
  App -> ClassDataCollection
  App ->"*" TerminalTextColor
}

package datasource.configspec {
  class ConfigSpec {
    -sections: List<Section>
  }
  class Section {
    -{static} DEFAULT_ENTITY_TYPE: String
    -title: String
    -checkName: String
    -entityType: String
    -settings: List<Setting>
    +representsCheck(): boolean
    -validateRepresentsCheck(): void

  }
  class Setting {
    -name: String
    -type: Type
    -desc: String
    -options: List<String>
    +hasStringOptions(): boolean
    -validateCanHaveOptions(): void
  }
  enum Type {
    BOOLEAN
    INT
    STRING
    LIST_OF_BOOLEAN
    LIST_OF_INT
    LIST_OF_STRING
    ~{static} parse(typeName: String): Type
  }

  interface ConfigSpecLoader {
    ~loadConfigSpec(): ConfigSpec
  }

  class JsonFileConfigSpecLoader {
    +{static} CONFIG_SPEC_PATH: String
    -configSpecPath: String
    +loadConfigSpec(): ConfigSpec
    -readSelects(selectsJson: JSONObject): Map<String, List<String>>
    -readSections(sectionsJson: JSONArray, selects: Map<String, List<String>>): List<ConfigSpec.Section>
    -readSettings(sectionJson: JSONObject, selects: Map<String, List<String>>): List<ConfigSpec.Setting>
    -readSetting(settingJson: JSONObject, selects: Map<String, List<String>>): ConfigSpec.Setting
    -{static} getStringOrNull(jsonObject: JSONObject, key: String): String
  }

  ConfigSpec +- Section
  ConfigSpec ->"*" Section
  Section +- Setting
  Section ->"*" Setting
  Setting +- Type
  Setting -> Type

  JsonFileConfigSpecLoader .|> ConfigSpecLoader
}

package datasource {
  interface ConfigRW {
    ~sourceExists(): boolean
    ~loadConfig(): Configuration
    ~saveConfig(config: Configuration): void
  }

  class Configuration {
    -data: Map<String, Object>
    -checkKey(key: String): void
    +applyChanges(changes: Map<String, Object>): Configuration
  }

  interface DataPrinter {
    print(s: String): void
  }
}

exception IOException {
}

exception Exception {
}

exception IllegalArgumentException {
}

exception RuntimeException {
}

exception FileNotFoundException {
}

ConfigSpecLoader ..> IOException: <<throws>>
JsonFileConfigSpecLoader ..> IOException: <<throws>>
ConfigRW ..> IOException: <<throws>>
Configuration ..> IllegalArgumentException: <<throws>>
DataPrinter ..> FileNotFoundException: <<throws>>
FileNotFoundException --|> IOException
IOException --|> Exception
IllegalArgumentException --|> RuntimeException
RuntimeException --|> Exception
@enduml