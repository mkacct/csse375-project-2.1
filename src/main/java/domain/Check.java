package domain;

import java.util.Map;
import java.util.Set;

import datasource.Configuration;
import domain.javadata.ClassData;

/**
 * A linter check (be it a cursory style check, principle check, or pattern detector).
 */
public abstract class Check {
	/**
	 * The check's name, for identification in the configuration file
	 */
	public final String name;

	private final boolean isEnabledByDefault;

	/**
	 * @param name The check's name, in camelCase, for identification in the configuration file
	 */
	Check(String name) {
		this(name, true);
	}

	/**
	 * @param name The check's name, in camelCase, for identification in the configuration file
	 * @param isEnabledByDefault Whether the check is enabled by default (true for general checks, false for specialized tools and such)
	 */
	Check(String name, boolean isEnabledByDefault) {
		if (name == null) {throw new IllegalArgumentException("Check name cannot be null");}
		this.name = name;
		this.isEnabledByDefault = isEnabledByDefault;
	}

	public final boolean isEnabled(Boolean configValue) {
		return (configValue != null) ? configValue : isEnabledByDefault;
	}

	/**
	 * @param classes map of class full names to class data
	 * @param config from the configuration file
	 * @return set of messages (errors, warnings, info) generated by the check
	 */
	public abstract Set<Message> run(Map<String, ClassData> classes, Configuration config);
}
