{
	"sections": [
		{
			"title": "Execution settings",
			"settings": [
				{
					"name": "skipUnmarkedChecks",
					"type": "boolean",
					"desc": "If true, all checks only run if they are explicitly enabled. Otherwise, most checks (those that are not disabled by default) run unless they are explicitly disabled."
				}
			]
		},
		{
			"title": "Settings applied to multiple checks",
			"settings": [
				{
					"name": "adapterClassNameRegex",
					"type": "String",
					"desc": "Regular expression for adapter class names, to exempt from Program to Interface, Not Implementation and Adapter Pattern checks (default is \"Adapter$\")."
				}
			]
		},
		{
			"title": "Naming Conventions",
			"checkName": "namingConventions",
			"settings": [
				{
					"name": "Package",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "Class",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "Interface",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "Abstract",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "Enum",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "Field",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "Method",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "Constant",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "EnumConstant",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "LocalVar",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "MethodParam",
					"type": "String",
					"select": "namingConvention"
				},
				{
					"name": "AllowEmptyPackage",
					"type": "boolean",
					"desc": "Whether to allow empty package names, i.e. \"\". Defaults to false."
				},
				{
					"name": "MaxLength",
					"type": "int",
					"desc": "Maximum length. Default is no max."
				}
			]
		},
		{
			"title": "Method Length",
			"checkName": "methodLength",
			"settings": [
				{
					"name": "maxMethodLengthInstrs",
					"type": "int",
					"desc": "Maximum method length, in bytecode instructions."
				}
			]
		},
		{
			"title": "Parameter Count",
			"checkName": "parameterCount",
			"settings": [
				{
					"name": "maxNumParameters",
					"type": "int",
					"desc": "Maximum number of parameters per method."
				}
			]
		},
		{
			"title": "No Global Variables",
			"checkName": "noGlobalVariables",
			"desc": "Checks for static, non-final fields."
		},
		{
			"title": "Required Overrides",
			"checkName": "requiredOverrides",
			"desc": "Checks for classes that extends the Comparable interface and implements compareTo() without implementing equals() and classes that implement equals() without implementing hashCode()."
		},
		{
			"title": "Unused Abstractions",
			"checkName": "unusedAbstractions",
			"desc": "Checks for any abstract classes that don't have any classes that extend it, or interfaces that don't have any classes implementing it."
		},
		{
			"title": "Immutable Exceptions",
			"checkName": "immutableExceptions",
			"desc": "Checks for exception classes without non-final fields. Any class whose name ends with 'Exception' or 'Error' will be checked."
		},
		{
			"title": "Information Hiding",
			"checkName": "informationHiding",
			"desc": "Checks for classes whose fields violate information hiding"
		},
		{
			"title": "Program to Interface, Not Implementation",
			"checkName": "programToInterface",
			"settings": [
				{
					"name": "domainPackageName",
					"type": "String",
					"desc": "Name of the domain package (default is \"domain\")."
				},
				{
					"name": "allowedDependencies",
					"type": "String[]",
					"desc": "List of user-specified allowed dependencies (add known interfaces and/or data classes here)."
				}
			],
			"desc": "Checks for classes who program to concrete implementations rather than interfaces. Programming to interfaces generally provides more flexibility in applications."
		},
		{
			"title": "Low Coupling",
			"checkName": "lowCoupling",
			"settings": [
				{
					"name": "coupMaxInDegree",
					"type": "int",
					"desc": "Specifies the maximum In-Degree for a class. Default is no max."
				},
				{
					"name": "coupMaxOutDegree",
					"type": "int",
					"desc": "Specifies the maximum Out-Degree for a class. Default is no max."
				},
				{
					"name": "coupIgnorePackage",
					"type": "String",
					"desc": "Specifies a package to ignore in a check (for example, ignore the presentation layer)."
				},
				{
					"name": "coupCycles",
					"type": "boolean",
					"desc": "Specifies whether to check for cycles. Defaults to true."
				},
				{
					"name": "coupIgnoreSelfCycles",
					"type": "boolean",
					"desc": "Specifies whether Classes that reference themselves will be reported (cycles like A â†’ A). Defaults to true."
				}
			],
			"desc": "Checks for classes who are too closely dependent on one another, when alternative solutions allowing such classes to exist more independently are available."
		},
		{
			"title": "Strategy Pattern",
			"checkName": "strategyPattern",
			"desc": "Checks if a class implements the Strategy pattern by checking for interfaces in its fields and if a concrete subclass implements it."
		},
		{
			"title": "Observer Pattern",
			"checkName": "observerPattern",
			"settings": [
				{
					"name": "obsInterface",
					"type": "boolean",
					"desc": "Specifies whether to check for interface subjects. Defaults to true."
				},
				{
					"name": "obsAbstract",
					"type": "boolean",
					"desc": "Specifies whether to check for abstract class subjects. Defaults to true."
				},
				{
					"name": "obsConcrete",
					"type": "boolean",
					"desc": "Specifies whether to check for patterns with only a concrete subject, and no abstract subject."
				}
			],
			"desc": "Checks if classes properly implement ways to notify multiple objects about events its observing. The observer pattern allows classes to subscribe and unsubscribe from watching for a certain event."
		},
		{
			"title": "Adapter Pattern",
			"checkName": "adapterPattern",
			"desc": "Check if an adapter class does not implement an interface."
		},
		{
			"title": "Constant Interface",
			"checkName": "constantInterface",
			"settings": [
				{
					"name": "allowMarkerInterfaces",
					"type": "boolean",
					"desc": "If true, interfaces with no fields nor methods (\"marker interfaces\") will be ignored. (Defaults to false.)"
				}
			],
			"desc": "Checks for any interfaces that contains only fields and no methods. This is similar to Data Classes."
		},
		{
			"title": "PlantUML Generator",
			"checkName": "plantUMLGenerator",
			"entityTypeOverride": "feature",
			"settings": [
				{
					"name": ".pumlOutputPath",
					"type": "String",
					"desc": "Specifies the path for the output .puml file. Defaults to pumlGen.puml (in the root of the directory)."
				},
				{
					"name": ".svgOutputPath",
					"type": "String",
					"desc": "Specifies the path for the output .svg file. Defaults to svgGen.puml (in the root of the directory)."
				}
			]
		}
	],

	"selects": {
		"namingConvention": [
			"lowercase",
			"UPPERCASE",
			"UPPER_CASE",
			"lower_case",
			"camelCase",
			"PascalCase",
			"ANY"
		]
	}
}
