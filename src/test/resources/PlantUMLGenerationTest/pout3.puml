@startuml
'Generated by linter project
'Certain abstract methods and enum methods do not have paramater names available
'Inner classes, Exceptions, and Generic/Paramaterized classes are unsupported
'There may also be the occasional mysterious missing type paramater or return type or dependency

package highdegrees {
	+class V {
		+V()
		+i(): int
	}
	+class W {
		+i(): int
		+W()
	}
	+class X {
		+i(): int
		+X()
	}
	+class Bad {
		~v: V
		~b: Bad
		~w: W
		+Bad()
		+a(x: X, y: Y): int
	}
	+class Y {
		+Y()
		+i(): int
	}
	+class Z {
		+Z()
		+i(): int
	}
 }
package simplecycle {
	+class A {
		~alpha: int
		~set(a: int): void
		+A()
	}
	+class B {
		~c: C
		~four(): void
		+B()
	}
	+class C {
		~three: int
		~four(a: A): void
		+C()
	}
 }
package simplenocycle {
	+class Main {
		+{static} main(args: String[]): void
		+Main()
	}
	+class D {
		~e: E
		+toString(): String
		~D()
	}
	+class E {
		~three: int
		~E()
		+toString(): String
	}
 }
package complicatedyes {
	+class B {
		~c: C
		~four(): void
		+B()
	}
	+class C {
		~three: int
		+C()
		~four(a: A): void
	}
	+class V {
		~w: W
		+V()
		+i(): int
	}
	+class W {
		~a: A
		+W()
		+i(): int
	}
	+class X {
		+i(): int
		+X()
	}
	+class Y {
		+i(): int
		+Y()
	}
	+class Z {
		+Z()
		+i(): int
	}
	+class Bad {
		~w: W
		~v: V
		+Bad()
		+a(x: X, y: Y): int
	}
	+class D {
		~e: E
		~D()
		+toString(): String
	}
	+class E {
		~three: int
		~E()
		+toString(): String
	}
	+class A {
		~alpha: int
		+A()
		~set(a: int): void
	}
 }
complicatedyes.D --> complicatedyes.E
highdegrees.Bad --|> highdegrees.V
highdegrees.Bad --> highdegrees.V
highdegrees.Bad --> highdegrees.W
highdegrees.Bad ..> highdegrees.X
highdegrees.Bad --> highdegrees.Bad
highdegrees.Bad ..> highdegrees.Y
highdegrees.Bad ..> highdegrees.Z
complicatedyes.E ..> complicatedyes.Y
complicatedyes.A --|> complicatedyes.B
complicatedyes.B --> complicatedyes.C
complicatedyes.B --|> complicatedyes.V
complicatedyes.C ..> complicatedyes.A
simplecycle.B --> simplecycle.C
simplecycle.C ..> simplecycle.A
complicatedyes.Bad ..> complicatedyes.X
complicatedyes.Bad ..> complicatedyes.Y
complicatedyes.Bad ..> complicatedyes.Z
complicatedyes.Bad --|> complicatedyes.V
complicatedyes.Bad --> complicatedyes.V
complicatedyes.Bad --> complicatedyes.W
complicatedyes.Z --|> complicatedyes.A
complicatedyes.V --> complicatedyes.W
complicatedyes.W --> complicatedyes.A
simplenocycle.D --> simplenocycle.E
simplenocycle.Main ..> simplenocycle.E
simplenocycle.Main ..> simplenocycle.D
simplecycle.A --|> simplecycle.B
@enduml