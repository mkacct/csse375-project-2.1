@startuml
'Generated by linter project
'Certain abstract methods and enum methods do not have paramater names available
'Inner classes, Exceptions, and Generic/Paramaterized classes are unsupported
'There may also be the occasional mysterious missing type paramater or return type or dependency

package engine {
	+class Integrator {
		+Integrator()
		+{static} integrate(f: Function<Double, Double>, lowerBound: double, upperBound: double, stepSize: double, integrationMethod: IntegrationMethod): double
	}
	+class AbsIntegration {
		-method: IntegrationMethod
		+integrateOneStep(f: Function<Double, Double>, x_i: double, stepSize: double): double
		~AbsIntegration(method: IntegrationMethod)
	}
	+interface IntegrationMethod {
		+{abstract} integrateOneStep(Function, double, double): double
	}
	+class BooleIntegration {
		+BooleIntegration()
		+integrateOneStep(f: Function<Double, Double>, x_i: double, stepSize: double): double
	}
	+class TrapezoidIntegration {
		+integrateOneStep(f: Function<Double, Double>, x_i: double, stepSize: double): double
		+TrapezoidIntegration()
	}
	+class SimpsonIntegration {
		+SimpsonIntegration()
		+integrateOneStep(f: Function<Double, Double>, x_i: double, stepSize: double): double
	}
	+class Simpson38Integration {
		+integrateOneStep(f: Function<Double, Double>, x_i: double, stepSize: double): double
		+Simpson38Integration()
	}
 }
engine.SimpsonIntegration ..|> engine.IntegrationMethod
engine.AbsIntegration --> engine.IntegrationMethod
engine.AbsIntegration ..|> engine.IntegrationMethod
engine.Simpson38Integration ..|> engine.IntegrationMethod
engine.TrapezoidIntegration ..|> engine.IntegrationMethod
engine.Integrator ..> engine.IntegrationMethod
engine.BooleIntegration ..|> engine.IntegrationMethod
@enduml