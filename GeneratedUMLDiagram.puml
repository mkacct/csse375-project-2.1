@startuml
'Generated by linter project
'Certain abstract methods and enum methods do not have paramater names available
'Inner classes, Exceptions, and Generic/Paramaterized classes are unsupported
'There may also be the occasional mysterious missing type paramater or return type or dependency


'This is the generated plantuml code for (a version) of this project

package datasource {
	+interface ConfigLoader {
		+{abstract} loadConfig(): Configuration
	}
	+interface FilesLoader {
		+{abstract} loadFiles(String): Set
	}
	+class Configuration <<final>> {
		-<<final>> data: Map<String, Object>
		+getInt(key: String, fallback: int): int
		+getListOfBoolean(key: String, fallback: List<Boolean>): List<Boolean>
		+getListOfInt(key: String, fallback: List<Integer>): List<Integer>
		+getListOfString(key: String, fallback: List<String>): List<String>
		+getString(key: String, fallback: String): String
		+getInt(key: String): int
		+getString(key: String): String
		+getBoolean(key: String, fallback: boolean): boolean
		+getBoolean(key: String): boolean
		+getListOfBoolean(key: String): List<Boolean>
		+getListOfInt(key: String): List<Integer>
		+getListOfString(key: String): List<String>
		-checkKey(key: String): void
		+Configuration(data: Map<String, Object>)
	}
	+interface DataPrinter {
		+{abstract} print(String): void
	}
	+class FullFilePrinter {
		-<<final>> path: String
		+print(s: String): void
		+FullFilePrinter(path: String)
	}
	+class DirLoader {
		-<<final>> path: String
		-addFilesFromDir(files: Set, dir: File, ext: String): void
		+loadFiles(ext: String): Set
		+DirLoader(path: String)
		-readFile(file: File): byte[]
	}
	+class JsonFileConfigLoader {
		-<<final>> path: String
		+loadConfig(): Configuration
		+JsonFileConfigLoader(path: String)
	}
 }
package presentation {
	~class App {
		-{static} <<final>> CLASS_FILE_EXT: String
		-{static} <<final>> ENABLE_KEY_PREFIX: String
		-configLoader: ConfigLoader
		-{static} <<final>> SKIP_UNMARKED_CHECKS_KEY: String
		-{static} <<final>> MESSAGE_LEVEL_COLORS: Map<MessageLevel, TerminalTextColor>
		-filesLoader: FilesLoader
		~run(checks: Check[]): boolean
		-{static} printTotals(msgTotals: Map<MessageLevel, Integer>): void
		-{static} initMsgTotals(): Map<MessageLevel, Integer>
		-{static} runCheckAndPrintResults(check: Check, classes: Map<String, ClassData>, config: Configuration, msgTotals: Map<MessageLevel, Integer>): void
		-{static} readConfigBoolAndFallbackIfWrongType(config: Configuration, key: String, fallback: boolean): boolean
		-{static} readInClasses(classFiles: Set): Map<String, ClassData>
		-{static} colorMessageTag(msg: Message): String
		~App(filesLoader: FilesLoader, configLoader: ConfigLoader)
		-{static} runAllChecksAndPrintResults(checks: Check[], classes: Map<String, ClassData>, config: Configuration): Map<MessageLevel, Integer>
		-{static} generateTotalsTerm(totalsTerms: List<String>, level: MessageLevel, count: int): void
	}
	~class IOrecommendations {
		~IOrecommendations()
	}
	+class Main {
		-{static} <<final>> CHECKS: Check[]
		-{static} printUsage(): void
		+Main()
		+{static} main(args: String[]): void
	}
	~enum TerminalTextColor <<final>> {
		BLUE,
		BLACK,
		PURPLE,
		YELLOW,
		RED,
		CYAN,
		WHITE,
		GREEN
		-<<final>> ansiCode: String
		-{static} <<final>> RESET: String
		-TerminalTextColor(ansiCode: String, int, String)
		+applyTo(text: String): String
		+{static} valueOf(String): TerminalTextColor
		+{static} values(): TerminalTextColor[]
	}
 }
package domain {
	+class PackageStructure {
		-<<final>> subPackages: Set<PackageStructure>
		-<<final>> classes: Set<String>
		-<<final>> thisPackageName: String
		+getClasses(): Set<String>
		+getSubPackages(): Set<PackageStructure>
		+PackageStructure(classes: Set<String>)
		-parseClasses(classes: Map<String, String>): void
		-PackageStructure(thisPackageName: String, classes: Map<String, String>)
		+getPackageName(): String
	}
	+class ObserverPatternCheck {
		+gRun(config: Configuration): Set<Message>
		+ObserverPatternCheck()
		+getName(): String
	}
	+class AdapterPatternCheck {
		-{static} <<final>> NAME: String
		-{static} <<final>> DEFAULT_ADAPTER_CLASS_NAME_REGEX: String
		-{static} <<final>> ADAPTER_CLASS_NAME_REGEX_KEY: String
		-{static} findAdapters(classes: Map<String, ClassData>, adapterNamePattern: Pattern, messages: Set<Message>): Set<String>
		+run(classes: Map<String, ClassData>, config: Configuration): Set<Message>
		-{static} validateUsageOfAdapters(classes: Map<String, ClassData>, adapterFullNames: Set<String>, messages: Set<Message>): void
		+AdapterPatternCheck()
		+getName(): String
	}
	+class MethodLengthCheck {
		-{static} <<final>> MAX_METHOD_LENGTH_KEY: String
		-{static} <<final>> NAME: String
		-checkClass(classData: ClassData, maxMethodLengthInstrs: int, messages: Set<Message>): void
		+run(classes: Map<String, ClassData>, config: Configuration): Set<Message>
		+getName(): String
		+MethodLengthCheck()
	}
	+class Message <<final>> {
		+<<final>> text: String
		+<<final>> level: MessageLevel
		-<<final>> classFullNames: Set<String>
		+toString(): String
		+Message(level: MessageLevel, text: String, classFullNames: Set<String>)
		+getClassFullNames(): Set<String>
		+equals(obj: Object): boolean
		+hashCode(): int
		+Message(level: MessageLevel, text: String)
		+Message(level: MessageLevel, text: String, classFullName: String)
	}
	+class ClassGraph {
		-<<final>> numClasses: int
		-<<final>> stringToClass: Map<String, ClassData>
		-<<final>> edges: int[][]
		-<<final>> classes: Map<String, Integer>
		-<<final>> inverse: Map<Integer, String>
		+getIndex(c: String): int
		+getNumClasses(): int
		+ClassGraph(strToClass: Map<String, ClassData>)
		+{static} checkImplement(weight: int): boolean
		+outDegree(v: int): int
		+getWeight(i: int, j: int): int
		+column(j: int): int[]
		-removeArray(s: String): String
		+graphIterator(start: int): ClassGraphIterator
		+indexToClass(i: int): String
		+getClasses(): Map<String, ClassData>
		+{static} checkExtend(weight: int): boolean
		+{static} checkHasA(weight: int): boolean
		+inDegree(v: int): int
		+{static} checkDepends(weight: int): boolean
	}
	+class StrategyPatternCheck {
		+StrategyPatternCheck()
		+getName(): String
		-{static} getClassFromName(className: String, classes: Map<String, ClassData>): ClassData
		+run(classes: Map<String, ClassData>, config: Configuration): Set<Message>
	}
	+class ProgramToInterfaceNotImplementationCheck {
		-{static} <<final>> DEFAULT_DOMAIN_PKG_NAME: String
		-{static} <<final>> PRIMITIVE_TYPES: Set<String>
		-{static} <<final>> OBJECT_TYPE: String
		-{static} <<final>> PRIMITIVE_CLASSES: Set<String>
		-{static} <<final>> DOMAIN_PKG_NAME_KEY: String
		-{static} <<final>> ADAPTER_CLASS_NAME_REGEX_KEY: String
		-{static} <<final>> DEFAULT_ADAPTER_CLASS_NAME_REGEX: String
		-{static} <<final>> NAME: String
		-{static} <<final>> ALLOWED_DEPENDENCIES_KEY: String
		-{static} <<final>> COMMON_INTERFACES: Set<String>
		+run(classes: Map<String, ClassData>, config: Configuration): Set<Message>
		-{static} stripArrayIndicators(typeFullName: String): String
		+getName(): String
		+ProgramToInterfaceNotImplementationCheck()
		-{static} isTypeOkay(typeFullName: String, classes: Map<String, ClassData>, domainPkgName: String, allowedDeps: Set<String>): boolean
	}
	+enum NamingConventions <<final>> {
		lowercase,
		UPPER_CASE,
		PascalCase,
		ANY,
		lower_case,
		UPPERCASE,
		camelCase
		+{static} values(): NamingConventions[]
		-NamingConventions(String, int)
		+{static} getConvention(str: String): NamingConventions
		+{static} valueOf(String): NamingConventions
	}
	+class LowCouplingCheck {
		-recursion(it: ClassGraphIterator, messages: Set<Message>, pq: PriorityQueue<IntegerAndDegree>, ignoreSelf: boolean): void
		+gRun(config: Configuration): Set<Message>
		+LowCouplingCheck()
		+getName(): String
		-cyclePrint(classes: List<String>): String
	}
	+class InformationHidingCheck {
		+run(classes: Map<String, ClassData>, config: Configuration): Set<Message>
		+getName(): String
		+InformationHidingCheck()
	}
	+abstract GraphCheck {
		#graph: ClassGraph
		+GraphCheck()
		+{abstract} gRun(Configuration): Set<Message>
		+<<final>> run(classes: Map<String, ClassData>, config: Configuration): Set<Message>
	}
	+class IntegerAndDegree {
		+<<final>> inDegree: int
		+<<final>> index: int
		~IntegerAndDegree(index: int, inDegree: int)
		+compareTo(Object): int
		+compareTo(o: IntegerAndDegree): int
		+equals(index: int): boolean
	}
	+class ClassGraphIterator {
		-<<final>> vertex: int
		-<<final>> path: List<Integer>
		-<<final>> graph: ClassGraph
		+hasCycle(): boolean
		+getCurrent(): int
		+followEdge(): Set<ClassGraphIterator>
		+ClassGraphIterator(graph: ClassGraph, v: int, path: List<Integer>)
		+getPath(): List<Integer>
		+followEdge(extend: int, implement: int, hasA: int, depends: int): Set<ClassGraphIterator>
	}
	+class PlantUMLGenerator {
		-generatePackage(ps: PackageStructure, puml: StringBuilder, numTabs: int): void
		+gRun(config: Configuration): Set<Message>
		-printType(t: TypeStructure, puml: StringBuilder): void
		-appendTabs(numTabs: int, puml: StringBuilder): void
		+getName(): String
		-writeClass(cd: ClassData, puml: StringBuilder, numTabs: int): void
		-getSimpleName(str: String): String
		-appendAbstract(isAbstract: boolean, puml: StringBuilder): void
		+PlantUMLGenerator()
		-appendStatic(isStatic: boolean, puml: StringBuilder): void
		-{static} generateSVG(source: net.sourceforge.plantuml.SourceStringReader): String
		-printClassName(c: String, cd: ClassData, puml: StringBuilder, numTabs: int): void
		-appendAccessModifier(am: AccessModifier, puml: StringBuilder): void
		-appendFinal(isFinal: boolean, puml: StringBuilder): void
	}
	+class UnusedAbstractionsCheck {
		+run(classes: Map<String, ClassData>, config: Configuration): Set<Message>
		+getName(): String
		+UnusedAbstractionsCheck()
	}
	+class NamingConventionsCheck {
		-checkConvention(str: String, convention: NamingConventions): boolean
		+getName(): String
		+run(classes: Map<String, ClassData>, config: Configuration): Set<Message>
		+NamingConventionsCheck()
	}
	+enum MessageLevel <<final>> {
		ERROR,
		INFO,
		WARNING
		+<<final>> abbreviation: String
		+{static} valueOf(String): MessageLevel
		+{static} values(): MessageLevel[]
		-MessageLevel(abbrev: String, int, String)
	}
	+interface Check {
		+{abstract} getName(): String
		+{abstract} run(Map, Configuration): Set<Message>
	}
	package javadata {
		+interface FieldInstrData {
			+{abstract} getFieldName(): String
			+{abstract} getFieldTypeFullName(): String
			+{abstract} getFieldOwnerFullName(): String
			+{abstract} getOperation(): VariableOperation
		}
		+interface InstrData {
			+{abstract} getInstrType(): InstrType
		}
		~class ClassNodeAdapter {
			-<<final>> classNode: org.objectweb.asm.tree.ClassNode
			+getContainingClassFullName(): String
			+getMethods(): Set<MethodData>
			+isFinal(): boolean
			+getPackageName(): String
			+getAccessModifier(): AccessModifier
			+isStatic(): boolean
			+getClassType(): ClassType
			~ClassNodeAdapter(classNode: org.objectweb.asm.tree.ClassNode)
			+getInnerClassFullNames(): Set<String>
			+getSimpleName(): String
			+getSuperFullName(): String
			+getInterfaceFullNames(): Set<String>
			+getFields(): Set<FieldData>
			+isAbstract(): boolean
			+getFullName(): String
		}
		~class FieldInsnNodeAdapter {
			-<<final>> insn: org.objectweb.asm.tree.FieldInsnNode
			+getFieldOwnerFullName(): String
			+getOperation(): VariableOperation
			+getInstrType(): InstrType
			+getFieldName(): String
			+getFieldTypeFullName(): String
			~FieldInsnNodeAdapter(insn: org.objectweb.asm.tree.FieldInsnNode)
		}
		+interface LocalVarInstrData {
			+{abstract} getVarTypeFullName(): String
			+{abstract} getVarName(): String
			+{abstract} getOperation(): VariableOperation
		}
		+class TypeStructure {
			-subtypes: List<TypeStructure>
			-<<final>> baseTypeFullName: String
			-<<final>> numOfArray: int
			+getSubTypes(): List<TypeStructure>
			+TypeStructure(signature: String)
			+TypeStructure(typeFullName: String, numArray: int)
			+getNumArrays(): int
			+getFullTypeName(): String
			+getAllFullTypeNames(): Set<String>
		}
		~class MethodInsnNodeAdapter {
			-<<final>> insn: org.objectweb.asm.tree.MethodInsnNode
			+getMethodOwnerFullName(): String
			~MethodInsnNodeAdapter(insn: org.objectweb.asm.tree.MethodInsnNode)
			+getMethodName(): String
			+getInstrType(): InstrType
			+getMethodReturnTypeFullName(): String
		}
		+interface ClassData {
			+{abstract} isStatic(): boolean
			+{abstract} getAccessModifier(): AccessModifier
			+{abstract} getFullName(): String
			+{abstract} isFinal(): boolean
			+{abstract} getSimpleName(): String
			+{abstract} getInnerClassFullNames(): Set<String>
			+{abstract} getClassType(): ClassType
			+{abstract} getSuperFullName(): String
			+{abstract} getPackageName(): String
			+{abstract} isAbstract(): boolean
			+{abstract} getMethods(): Set<MethodData>
			+{abstract} getContainingClassFullName(): String
			+{abstract} getInterfaceFullNames(): Set<String>
			+{abstract} getFields(): Set<FieldData>
		}
		+enum InstrType <<final>> {
			LOCAL_VARIABLE,
			METHOD,
			FIELD
			+{static} valueOf(String): InstrType
			+{static} values(): InstrType[]
			-InstrType(String, int)
		}
		+class ClassReaderUtil {
			+{static} read(javaBytecode: byte[]): ClassData
			+ClassReaderUtil()
		}
		+enum AccessModifier <<final>> {
			PACKAGE_PRIVATE,
			PROTECTED,
			PRIVATE,
			PUBLIC
			+{static} valueOf(String): AccessModifier
			-AccessModifier(String, int)
			+{static} values(): AccessModifier[]
			~{static} parseOpcodes(access: int): AccessModifier
		}
		~class OtherInsnNodeAdapter {
			+getInstrType(): InstrType
			~OtherInsnNodeAdapter()
		}
		+enum VariableOperation <<final>> {
			SET,
			GET,
			RETURN
			+{static} values(): VariableOperation[]
			+{static} valueOf(String): VariableOperation
			~{static} parseOpcode(opcode: int): VariableOperation
			-VariableOperation(String, int)
		}
		+interface MethodData {
			+{static} <<final>> STATIC_INITIALIZER_NAME: String
			+{static} <<final>> CONSTRUCTOR_NAME: String
			+{abstract} isFinal(): boolean
			+{abstract} getReturnTypeStructure(): TypeStructure
			+{abstract} getName(): String
			+{abstract} getAllReturnTypeFullName(): Set<String>
			+{abstract} getExceptionTypeFullNames(): Set<String>
			+{abstract} getAccessModifier(): AccessModifier
			+{abstract} getReturnTypeFullName(): String
			+{abstract} getLocalVariables(): Set<VariableData>
			+{abstract} isStatic(): boolean
			+{abstract} getParams(): List<VariableData>
			+{abstract} getInstructions(): List<InstrData>
			+{abstract} isAbstract(): boolean
		}
		+interface FieldData {
			+{abstract} getAccessModifier(): AccessModifier
			+{abstract} typeParam(): TypeStructure
			+{abstract} getAllTypeFullName(): Set<String>
			+{abstract} getTypeFullName(): String
			+{abstract} isFinal(): boolean
			+{abstract} isStatic(): boolean
			+{abstract} getName(): String
		}
		~class LocalVariableUtil {
			~{static} findLocalVariableNode(var: int, localVars: List<org.objectweb.asm.tree.LocalVariableNode>): org.objectweb.asm.tree.LocalVariableNode
			~LocalVariableUtil()
		}
		~class MethodNodeAdapter {
			-{static} <<final>> THIS: String
			-<<final>> methodNode: org.objectweb.asm.tree.MethodNode
			+isStatic(): boolean
			+getParams(): List<VariableData>
			-createInsnNodeAdapter(insn: org.objectweb.asm.tree.AbstractInsnNode): InstrData
			+getReturnTypeStructure(): TypeStructure
			~MethodNodeAdapter(methodNode: org.objectweb.asm.tree.MethodNode)
			+isAbstract(): boolean
			+getInstructions(): List<InstrData>
			+getName(): String
			+getReturnTypeFullName(): String
			+isFinal(): boolean
			+getExceptionTypeFullNames(): Set<String>
			+getAccessModifier(): AccessModifier
			+getLocalVariables(): Set<VariableData>
			+getAllReturnTypeFullName(): Set<String>
		}
		+interface MethodInstrData {
			+{abstract} getMethodOwnerFullName(): String
			+{abstract} getMethodName(): String
			+{abstract} getMethodReturnTypeFullName(): String
		}
		+class VariableData <<final>> {
			-<<final>> signature: String
			+<<final>> name: String
			+<<final>> typeFullName: String
			+equals(obj: Object): boolean
			+typeParam(): TypeStructure
			+hashCode(): int
			+getAllTypeFullName(): Set<String>
			+VariableData(name: String, typeFullName: String, signature: String)
		}
		+enum ClassType <<final>> {
			CLASS,
			INTERFACE,
			ENUM
			+{static} values(): ClassType[]
			~{static} parseOpcodes(access: int): ClassType
			+{static} valueOf(String): ClassType
			-ClassType(String, int)
		}
		~class FieldNodeAdapter {
			-<<final>> fieldNode: org.objectweb.asm.tree.FieldNode
			~FieldNodeAdapter(fieldNode: org.objectweb.asm.tree.FieldNode)
			+getName(): String
			+getAccessModifier(): AccessModifier
			+getTypeFullName(): String
			+typeParam(): TypeStructure
			+getAllTypeFullName(): Set<String>
			+isStatic(): boolean
			+isFinal(): boolean
		}
		~class VarInsnNodeAdapter {
			-<<final>> localVariableNode: org.objectweb.asm.tree.LocalVariableNode
			-<<final>> insn: org.objectweb.asm.tree.VarInsnNode
			+getVarName(): String
			+getOperation(): VariableOperation
			+getInstrType(): InstrType
			+getVarTypeFullName(): String
			~VarInsnNodeAdapter(insn: org.objectweb.asm.tree.VarInsnNode, localVars: List<org.objectweb.asm.tree.LocalVariableNode>)
		}
	 }
 }
datasource.JsonFileConfigLoader ..> datasource.Configuration
datasource.JsonFileConfigLoader ..|> datasource.ConfigLoader
domain.InformationHidingCheck ..> domain.MessageLevel
domain.InformationHidingCheck ..> domain.javadata.MethodData
domain.InformationHidingCheck ..> datasource.Configuration
domain.InformationHidingCheck ..> domain.javadata.FieldData
domain.InformationHidingCheck ..> domain.javadata.ClassData
domain.InformationHidingCheck ..|> domain.Check
domain.InformationHidingCheck ..> domain.javadata.AccessModifier
domain.InformationHidingCheck ..> domain.Message
domain.javadata.FieldInstrData ..> domain.javadata.VariableOperation
domain.javadata.FieldInstrData ..|> domain.javadata.InstrData
domain.javadata.FieldInsnNodeAdapter ..|> domain.javadata.FieldInstrData
domain.javadata.FieldInsnNodeAdapter ..> domain.javadata.VariableOperation
domain.javadata.FieldInsnNodeAdapter ..> domain.javadata.InstrType
domain.javadata.MethodData ..> domain.javadata.TypeStructure
domain.javadata.MethodData ..> domain.javadata.InstrData
domain.javadata.MethodData ..> domain.javadata.VariableData
domain.javadata.MethodData ..> domain.javadata.AccessModifier
domain.javadata.TypeStructure --> domain.javadata.TypeStructure
domain.LowCouplingCheck ..> domain.MessageLevel
domain.LowCouplingCheck ..> datasource.Configuration
domain.LowCouplingCheck --|> domain.GraphCheck
domain.LowCouplingCheck ..> domain.ClassGraphIterator
domain.LowCouplingCheck ..> domain.ClassGraph
domain.LowCouplingCheck ..> domain.javadata.ClassData
domain.LowCouplingCheck ..> domain.IntegerAndDegree
domain.LowCouplingCheck ..> domain.Message
domain.GraphCheck ..> datasource.Configuration
domain.GraphCheck --> domain.ClassGraph
domain.GraphCheck ..> domain.javadata.ClassData
domain.GraphCheck ..|> domain.Check
domain.GraphCheck ..> domain.Message
domain.UnusedAbstractionsCheck ..> domain.MessageLevel
domain.UnusedAbstractionsCheck ..> datasource.Configuration
domain.UnusedAbstractionsCheck ..> domain.javadata.ClassType
domain.UnusedAbstractionsCheck ..> domain.javadata.ClassData
domain.UnusedAbstractionsCheck ..|> domain.Check
domain.UnusedAbstractionsCheck ..> domain.Message
domain.ClassGraphIterator --> domain.ClassGraph
domain.javadata.VarInsnNodeAdapter ..> domain.javadata.LocalVariableUtil
domain.javadata.VarInsnNodeAdapter ..> domain.javadata.VariableOperation
domain.javadata.VarInsnNodeAdapter ..|> domain.javadata.LocalVarInstrData
domain.javadata.VarInsnNodeAdapter ..> domain.javadata.InstrType
presentation.Main ..> datasource.JsonFileConfigLoader
presentation.Main ..> domain.InformationHidingCheck
presentation.Main ..> domain.LowCouplingCheck
presentation.Main ..> domain.UnusedAbstractionsCheck
presentation.Main ..> domain.ObserverPatternCheck
presentation.Main ..> datasource.DirLoader
presentation.Main ..> domain.NamingConventionsCheck
presentation.Main --> domain.Check
presentation.Main ..> domain.ProgramToInterfaceNotImplementationCheck
presentation.Main ..> presentation.App
presentation.Main ..> domain.StrategyPatternCheck
presentation.Main ..> domain.MethodLengthCheck
presentation.Main ..> domain.AdapterPatternCheck
presentation.Main ..> domain.PlantUMLGenerator
domain.ClassGraph ..> domain.javadata.FieldInstrData
domain.ClassGraph ..> domain.javadata.MethodData
domain.ClassGraph ..> domain.javadata.ClassType
domain.ClassGraph ..> domain.ClassGraphIterator
domain.ClassGraph ..> domain.javadata.FieldData
domain.ClassGraph --> domain.javadata.ClassData
domain.ClassGraph ..> domain.javadata.MethodInstrData
domain.ClassGraph ..> domain.javadata.InstrData
domain.ClassGraph ..> domain.javadata.VariableData
domain.ClassGraph ..> domain.javadata.LocalVarInstrData
domain.ClassGraph ..> domain.javadata.InstrType
domain.javadata.ClassReaderUtil ..> domain.javadata.ClassNodeAdapter
domain.javadata.ClassReaderUtil ..> domain.javadata.ClassData
domain.ObserverPatternCheck ..> domain.MessageLevel
domain.ObserverPatternCheck ..> datasource.Configuration
domain.ObserverPatternCheck --|> domain.GraphCheck
domain.ObserverPatternCheck ..> domain.javadata.ClassType
domain.ObserverPatternCheck ..> domain.ClassGraphIterator
domain.ObserverPatternCheck ..> domain.ClassGraph
domain.ObserverPatternCheck ..> domain.javadata.ClassData
domain.ObserverPatternCheck ..> domain.Message
datasource.DirLoader ..|> datasource.FilesLoader
domain.javadata.MethodInsnNodeAdapter ..|> domain.javadata.MethodInstrData
domain.javadata.MethodInsnNodeAdapter ..> domain.javadata.InstrType
domain.javadata.OtherInsnNodeAdapter ..|> domain.javadata.InstrData
domain.javadata.OtherInsnNodeAdapter ..> domain.javadata.InstrType
domain.NamingConventionsCheck ..> domain.MessageLevel
domain.NamingConventionsCheck ..> domain.javadata.MethodData
domain.NamingConventionsCheck ..> datasource.Configuration
domain.NamingConventionsCheck ..> domain.javadata.ClassType
domain.NamingConventionsCheck ..> domain.NamingConventions
domain.NamingConventionsCheck ..> domain.javadata.FieldData
domain.NamingConventionsCheck ..> domain.javadata.ClassData
domain.NamingConventionsCheck ..|> domain.Check
domain.NamingConventionsCheck ..> domain.javadata.VariableData
domain.NamingConventionsCheck ..> domain.Message
domain.javadata.ClassNodeAdapter ..> domain.javadata.MethodData
domain.javadata.ClassNodeAdapter ..> domain.javadata.ClassType
domain.javadata.ClassNodeAdapter ..> domain.javadata.FieldData
domain.javadata.ClassNodeAdapter ..|> domain.javadata.ClassData
domain.javadata.ClassNodeAdapter ..> domain.javadata.FieldNodeAdapter
domain.javadata.ClassNodeAdapter ..> domain.javadata.AccessModifier
domain.javadata.ClassNodeAdapter ..> domain.javadata.MethodNodeAdapter
domain.javadata.FieldData ..> domain.javadata.TypeStructure
domain.javadata.FieldData ..> domain.javadata.AccessModifier
domain.javadata.ClassData ..> domain.javadata.MethodData
domain.javadata.ClassData ..> domain.javadata.ClassType
domain.javadata.ClassData ..> domain.javadata.FieldData
domain.javadata.ClassData ..> domain.javadata.AccessModifier
domain.javadata.MethodInstrData ..|> domain.javadata.InstrData
domain.javadata.FieldNodeAdapter ..> domain.javadata.TypeStructure
domain.javadata.FieldNodeAdapter ..|> domain.javadata.FieldData
domain.javadata.FieldNodeAdapter ..> domain.javadata.AccessModifier
domain.Check ..> datasource.Configuration
domain.Check ..> domain.Message
domain.PackageStructure --> domain.PackageStructure
domain.ProgramToInterfaceNotImplementationCheck ..> domain.MessageLevel
domain.ProgramToInterfaceNotImplementationCheck ..> domain.javadata.MethodData
domain.ProgramToInterfaceNotImplementationCheck ..> datasource.Configuration
domain.ProgramToInterfaceNotImplementationCheck ..> domain.javadata.ClassType
domain.ProgramToInterfaceNotImplementationCheck ..> domain.javadata.FieldData
domain.ProgramToInterfaceNotImplementationCheck ..> domain.javadata.ClassData
domain.ProgramToInterfaceNotImplementationCheck ..|> domain.Check
domain.ProgramToInterfaceNotImplementationCheck ..> domain.javadata.VariableData
domain.ProgramToInterfaceNotImplementationCheck ..> domain.Message
domain.javadata.InstrData ..> domain.javadata.InstrType
presentation.App --> domain.MessageLevel
presentation.App ..> datasource.Configuration
presentation.App ..> domain.javadata.ClassReaderUtil
presentation.App --> presentation.TerminalTextColor
presentation.App ..> domain.javadata.ClassData
presentation.App ..> domain.Check
presentation.App ..> domain.Message
presentation.App --> datasource.FilesLoader
presentation.App --> datasource.ConfigLoader
datasource.FullFilePrinter ..|> datasource.DataPrinter
domain.javadata.VariableData ..> domain.javadata.TypeStructure
domain.StrategyPatternCheck ..> domain.MessageLevel
domain.StrategyPatternCheck ..> datasource.Configuration
domain.StrategyPatternCheck ..> domain.javadata.ClassType
domain.StrategyPatternCheck ..> domain.javadata.FieldData
domain.StrategyPatternCheck ..> domain.javadata.ClassData
domain.StrategyPatternCheck ..|> domain.Check
domain.StrategyPatternCheck ..> domain.Message
domain.Message --> domain.MessageLevel
domain.javadata.LocalVarInstrData ..> domain.javadata.VariableOperation
domain.javadata.LocalVarInstrData ..|> domain.javadata.InstrData
domain.javadata.MethodNodeAdapter ..> domain.javadata.FieldInsnNodeAdapter
domain.javadata.MethodNodeAdapter ..|> domain.javadata.MethodData
domain.javadata.MethodNodeAdapter ..> domain.javadata.TypeStructure
domain.javadata.MethodNodeAdapter ..> domain.javadata.VarInsnNodeAdapter
domain.javadata.MethodNodeAdapter ..> domain.javadata.MethodInsnNodeAdapter
domain.javadata.MethodNodeAdapter ..> domain.javadata.LocalVariableUtil
domain.javadata.MethodNodeAdapter ..> domain.javadata.OtherInsnNodeAdapter
domain.javadata.MethodNodeAdapter ..> domain.javadata.InstrData
domain.javadata.MethodNodeAdapter ..> domain.javadata.VariableData
domain.javadata.MethodNodeAdapter ..> domain.javadata.AccessModifier
domain.MethodLengthCheck ..> domain.MessageLevel
domain.MethodLengthCheck ..> domain.javadata.MethodData
domain.MethodLengthCheck ..> datasource.Configuration
domain.MethodLengthCheck ..> domain.javadata.ClassData
domain.MethodLengthCheck ..|> domain.Check
domain.MethodLengthCheck ..> domain.javadata.InstrData
domain.MethodLengthCheck ..> domain.Message
domain.AdapterPatternCheck ..> domain.MessageLevel
domain.AdapterPatternCheck ..> domain.javadata.MethodData
domain.AdapterPatternCheck ..> datasource.Configuration
domain.AdapterPatternCheck ..> domain.javadata.FieldData
domain.AdapterPatternCheck ..> domain.javadata.ClassData
domain.AdapterPatternCheck ..|> domain.Check
domain.AdapterPatternCheck ..> domain.javadata.VariableData
domain.AdapterPatternCheck ..> domain.Message
datasource.ConfigLoader ..> datasource.Configuration
domain.PlantUMLGenerator ..> domain.MessageLevel
domain.PlantUMLGenerator ..> domain.javadata.MethodData
domain.PlantUMLGenerator ..> domain.javadata.TypeStructure
domain.PlantUMLGenerator ..> datasource.Configuration
domain.PlantUMLGenerator --|> domain.GraphCheck
domain.PlantUMLGenerator ..> datasource.DataPrinter
domain.PlantUMLGenerator ..> domain.javadata.ClassType
domain.PlantUMLGenerator ..> domain.ClassGraph
domain.PlantUMLGenerator ..> domain.javadata.FieldData
domain.PlantUMLGenerator ..> domain.javadata.ClassData
domain.PlantUMLGenerator ..> domain.PackageStructure
domain.PlantUMLGenerator ..> datasource.FullFilePrinter
domain.PlantUMLGenerator ..> domain.javadata.VariableData
domain.PlantUMLGenerator ..> domain.javadata.AccessModifier
domain.PlantUMLGenerator ..> domain.Message
@enduml